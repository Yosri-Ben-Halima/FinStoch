# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: FinStoch CI Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        pip install mypy
        pip install ruff
        pip install no_implicit_optional
        python -m pip install --upgrade pip
        python -m pip install types-python-dateutil
        python -m pip install flake8 pytest
        if (Test-Path requirements.txt) { pip install -r requirements.txt }

    - name: Format code with ruff
      run: |
        ruff format

    - name: Remove Implicit Optionals with no_implicit_optional
      run: |
        no_implicit_optional FinStoch/

    - name: Commit and push changes
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        git commit -m "Apply formatting with ruff & removing implicit optionals with no_implicit_optional" || echo "No changes to commit"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        mypy . --exclude venv --ignore-missing-imports

    - name: Test with unittest
      run: |
        # Run unit tests with unittest and generate a JUnit-compatible report
        python -m unittest discover -s tests -p "*_test.py" > result.xml

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results${{matrix.python-version}}
        path: result.xml
